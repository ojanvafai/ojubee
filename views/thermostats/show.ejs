<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/css/base.css' />
    <style>
      #details {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
      }
      #details > .split-container {
        font-size: 20px;
      }
      img {
        opacity: 1;
        transition: opacity 0.5s;
        width: 50px;
        margin: 10px;
        float: right;
      }
      .hidden {
        opacity: 0;
      }
      .split-container {
        display: flex;
        position: relative;
      }
      .split-container > .item {
        flex: 1;
        margin: 5px;
      }
      .split-container > button {
        border: 1px solid;
        padding: 20px 0;
        font-size: 60px;
        background: white;
      }
      #currentTemp {
        font-size: 40px;
      }
      #sensors > div {
        padding: 3px;
      }
      .fill {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        opacity: 0.5;
        pointer-events: none;
      }
      .temp {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 60px;
        font-weight: bold;
      }
      .heat {
        color: red;
      }
      .cool {
        color: blue;
      }
    </style>

    <script>
      var g_state;
      var pendingRequest;
      var pendingUpdateState;

      function applyState(state) {
        var html = '';
        state.sensors.forEach(function(sensor) {
          html += '<div>' + sensor.name + ': ' + sensor.temp + '</div>';
        });
        document.getElementById('sensors').innerHTML = html;

        ["currentTemp", "desiredCool", "desiredHeat", "mode",].forEach((id) => {
          document.getElementById(id).textContent = state[id];
        });
      }

      function updateState() {
        if (pendingUpdateState)
          pendingUpdateState.abort();

        pendingUpdateState = new XMLHttpRequest();
        pendingUpdateState.responseType = 'json';

        pendingUpdateState.addEventListener('load', () =>{
          document.body.classList.remove('hidden');

          var newState = pendingUpdateState.response;

          // Check if desiredCool/heat don't match early return and
          // issue another updateTemp request and loop through till it takes.
          if (g_state &&
              (newState.desiredHeat != g_state.desiredHeat ||
               newState.desiredCool != g_state.desiredCool)) {
            console.log("Numbers didn't take. Retrying.");
            setTimeout(updateTemp, 1000);
            return;
          }

          spinner.classList.add('hidden');

          // If we are on initial load, round values to weed out buggy
          // fractional junk.
          if (!g_state)
            roundTempValues(newState);

          g_state = newState;
          applyState(g_state);
        });

        pendingUpdateState.addEventListener('error', () =>{});
        pendingUpdateState.open("GET", "/thermostats/<%= thermostatId %>/json");
        pendingUpdateState.send();
      }

      updateState();
      window.addEventListener('focus', updateState);

      function encodedValue(id) {
        // TODO: spaces as '+'
        return id + '=' + encodeURIComponent(g_state[id]);
      }

      function modifyTemp(id, delta) {
        g_state[id] = g_state[id] + delta;

        // Must have a minimum of 5 degrees difference.
        // Otherwise the server tries to do this logic but
        // goes crazy and uses fractional values.
        if (g_state.desiredCool - g_state.desiredHeat < 5) {
          if (id == 'desiredHeat')
            g_state.desiredCool = g_state.desiredHeat + 5;
          else
            g_state.desiredHeat = g_state.desiredCool - 5;
        }

        applyState(g_state);
        updateTemp();
      }

      // This rounding shouldn't be necessary, but ecobee sometimes returns
      // fractional values and everything gets confused.
      // Seems to happen if you try to set temp values that aren't allowed,
      // e.g. at the bounds of allowed, or hot/cold too close to each other.
      function roundTempValues(state) {
        state.desiredHeat = Math.round(state.desiredHeat);
        state.desiredCool = Math.round(state.desiredCool);
      }

      function updateTemp() {
        if (pendingRequest)
          pendingRequest.abort();

        spinner.classList.remove('hidden');

        pendingRequest = new XMLHttpRequest();

        pendingRequest.addEventListener('load', () => {
          updateState();
        });

        pendingRequest.addEventListener('error', () => {
          handleUpdateTemperatureComplete();
          updateState();
          alert('Update failed. Reload the page to be safe.');
        });

        pendingRequest.open("POST", "/thermostats/<%= thermostatId %>/sethold");
        pendingRequest.setRequestHeader('Content-Type','application/x-www-form-urlencoded')

        roundTempValues(g_state);
        pendingRequest.send(encodedValue('desiredHeat') + '&' + encodedValue('desiredCool'));
      }
    </script>
  </head>

  <body class="hidden">

    <div style="height: 0"><img id="spinner" class="hidden" src="/img/spinner.gif"></div>

    <div id="details">
      <div class="temp item" id="currentTemp"></div>
      <div class="split-container">
        <div class="item" id="sensors"></div>
        <div class="item" id="override">
          <div>Mode: <span id="mode"></span></div>
          <form method="POST" action="/thermostats/<%= thermostatId %>/resume">
            <button style="font-size: 40px" type="submit" <%= !isHold ? 'disabled' : ''%> data-loading-text="Loading...">resume</button>
          </form>
        </div>
      </div>
    </div>

    <div class="split-container">
      <div class="cool temp fill" id="desiredCool"></div>
      <button class="item" onclick="modifyTemp('desiredCool', -1)">-</button>
      <button class="item" onclick="modifyTemp('desiredCool', 1)">+</button>
    </div>

    <div class="split-container">
      <div class="heat temp fill" id="desiredHeat"></div>
      <button class="item" onclick="modifyTemp('desiredHeat', -1)">-</button>
      <button class="item" onclick="modifyTemp('desiredHeat', 1)">+</button>
    </div>

    <div class="nav">
      <a href="/">Ojubee</a>
      <% for(var i = 0; i < thermostats.length; i++) { %>
        <a href="/thermostats/<%= thermostats[i].thermostatId %>" <%= (thermostatId == thermostats[i].thermostatId) ? 'class=current' : ''%>>
          <%= thermostats[i].name  %>
        </a>
      <% } %>
    </div>

  </body>
</html>
